// This file is auto-generated by @hey-api/openapi-ts

export type AllFilter = 'all';

export type Body_admin_admin_login = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type KioskOrderCreate = {
    ordered_menus: Array<OrderedMenuCreate>;
    table_id: string;
    phone: string;
};

/**
 * 메뉴별 조리 대기 현황
 */
export type MenuCookingQueue = {
    menu_id: string;
    menu_name: string;
    menu_category?: (string | null);
    /**
     * 조리 대기중인 총 개수
     */
    total_pending_count: number;
    /**
     * 가장 오래된 주문 시간
     */
    oldest_order_time: (string | null);
    /**
     * 즉시 조리 가능 여부
     */
    is_instant_cook?: boolean;
};

export type MenuPublic = {
    name: string;
    desc?: (string | null);
    /**
     * price in won
     */
    price: number;
    image?: (string | null);
    bg_color?: (string | null);
    category?: (string | null);
    no_stock?: boolean;
    /**
     * 즉시 조리 가능한 메뉴 여부 (조리 없이 바로 서빙)
     */
    is_instant_cook?: boolean;
    id: string;
    created_at: string;
};

/**
 * 메뉴별 판매 통계
 */
export type MenuSalesStats = {
    menu_id: string;
    menu_name: string;
    menu_category?: (string | null);
    menu_price: number;
    /**
     * 총 주문된 개수
     */
    total_ordered: number;
    /**
     * 총 서빙된 개수
     */
    total_served: number;
    /**
     * 총 거절된 개수
     */
    total_rejected: number;
    /**
     * 총 매출 (서빙된 것만)
     */
    total_revenue: number;
    /**
     * 일평균 판매량
     */
    avg_daily_sales: number;
    /**
     * 마지막 주문 시간
     */
    last_ordered_at: (string | null);
};

export type MenuUpdate = {
    no_stock?: (boolean | null);
    is_instant_cook?: (boolean | null);
};

export type OrderedMenuCreate = {
    menu_id: string;
    amount: number;
};

export type OrderedMenuForServing = {
    id: string;
    cooked?: boolean;
    reject_reason?: (string | null);
    served_at?: (string | null);
    status: OrderedMenuStatus;
    menu: MenuPublic;
    order_id: string;
    order: OrderPublic;
    order_no: number;
    table: Tables;
    table_no: number;
    created_at: string;
};

/**
 * 메뉴별로 그룹화된 주문 메뉴 (수량 포함)
 */
export type OrderedMenuGrouped = {
    menu: MenuPublic;
    amount: number;
    cooked_count?: number;
    status: OrderedMenuStatus;
    /**
     * 해당 메뉴의 개별 주문 ID들
     */
    ordered_menu_ids: Array<(string)>;
    /**
     * 해당 메뉴의 개별 주문 상세 정보들
     */
    ordered_menus: Array<OrderedMenuPublic>;
};

export type OrderedMenuPublic = {
    id: string;
    cooked?: boolean;
    reject_reason?: (string | null);
    served_at?: (string | null);
    status: OrderedMenuStatus;
    menu: MenuPublic;
};

export type OrderedMenuStatus = 'ordered' | 'rejected' | 'cooked' | 'served';

export type OrderedMenuUpdate = {
    reject_reason?: (string | null);
    status?: (string | null);
};

/**
 * 그룹화된 메뉴 정보를 포함한 주문 응답 모델
 */
export type OrderPublic = {
    reject_reason?: (string | null);
    finished_at?: (string | null);
    created_at?: string;
    id: string;
    no: number;
    status: OrderStatus;
    total_price: number;
    final_price: number;
    grouped_ordered_menus: Array<OrderedMenuGrouped>;
    payment: (Payments | null);
    payment_info?: (PaymentInfo | null);
    team: TeamWithTable;
};

export type Orders = {
    reject_reason?: (string | null);
    finished_at?: (string | null);
    created_at?: string;
    id?: string;
    restaurant_id: string;
    team_id: string;
    payment_id?: (string | null);
    no?: (number | null);
    readonly status: OrderStatus;
    readonly total_price: number;
    /**
     * 총 결제 금액 (총액 + 주문번호 뒷 2자리)
     */
    readonly final_price: (number | null);
    /**
     * 메뉴별로 그룹화된 주문 메뉴 정보
     */
    readonly grouped_ordered_menus: Array<OrderedMenuGrouped>;
};

export type OrderStatus = 'ordered' | 'paid' | 'rejected' | 'finished';

export type OrderUpdate = {
    payment_id?: (string | null);
    finished_at?: (string | null);
};

export type OrderWithPaymentInfo = {
    reject_reason?: (string | null);
    finished_at?: (string | null);
    created_at?: string;
    id: string;
    no: number;
    status: OrderStatus;
    total_price: number;
    final_price: number;
    grouped_ordered_menus: Array<OrderedMenuGrouped>;
    payment: (Payments | null);
    payment_info: PaymentInfo;
    team: TeamWithTable;
};

export type PaymentInfo = {
    bank_name: string;
    bank_account_no: string;
};

export type Payments = {
    id?: string;
    restaurant_id: string;
    transaction_by?: (string | null);
    amount: number;
    refunded_at?: (string | null);
    created_at?: string;
};

/**
 * 결제 정보와 주문 정보를 함께 포함하는 모델
 */
export type PaymentWithOrder = {
    id: string;
    restaurant_id: string;
    transaction_by?: (string | null);
    amount: number;
    refunded_at?: (string | null);
    created_at: string;
    order_id?: (string | null);
    order_no?: (number | null);
};

export type Restaurants = {
    id?: string;
    name?: string;
    open_time: string;
    close_time: string;
    break_start_time: (string | null);
    break_end_time: (string | null);
    created_at?: string;
};

export type RestaurantUpdate = {
    break_start_time?: (string | null);
    break_end_time?: (string | null);
};

/**
 * 기본 테이블 정보만 포함한 모델 (성능 최적화용)
 */
export type TableBasic = {
    id: string;
    no: number;
    type: TableType;
    status: TableStatus;
    created_at: string;
    teams_count?: number;
};

/**
 * 테이블 ID로 직접 주문 생성 (팀도 함께 생성)
 */
export type TableOrderCreate = {
    table_id: string;
    ordered_menus: Array<OrderedMenuCreate>;
};

export type TablePublic = {
    id: string;
    no: number;
    type: TableType;
    status: TableStatus;
    created_at: string;
};

export type Tables = {
    id?: string;
    restaurant_id: string;
    no: number;
    type?: TableType;
    status?: TableStatus;
    created_at?: string;
};

export type TableStatus = 'idle' | 'in_use' | 'reserved';

export type TableType = 'normal' | 'kiosk';

export type TableUpdate = {
    status: TableStatus;
};

export type TableWithOrders = {
    id: string;
    no: number;
    type: TableType;
    status: TableStatus;
    created_at: string;
    teams?: Array<TeamWithOrders>;
};

export type TeamWithOrders = {
    id: string;
    phone?: (string | null);
    ended_at?: (string | null);
    created_at: string;
    orders: Array<OrderPublic>;
};

export type TeamWithTable = {
    id: string;
    phone?: (string | null);
    ended_at?: (string | null);
    created_at: string;
    table: TablePublic;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type WaitingCreate = {
    name: string;
    phone: string;
};

export type WaitingFind = {
    name: string;
    phone: string;
};

export type WaitingPublic = {
    id: string;
    name: string;
    phone: string;
    notified_at: (string | null);
    entered_at: (string | null);
    rejected_at: (string | null);
    rejected_reason: (string | null);
    status: WaitingStatus;
    created_at: string;
    is_entered: boolean;
};

export type Waitings = {
    id?: string;
    restaurant_id: string;
    name: string;
    phone: string;
    notified_at?: (string | null);
    entered_at?: (string | null);
    rejected_at?: (string | null);
    rejected_reason?: (string | null);
    created_at?: string;
    readonly status: WaitingStatus;
};

export type WaitingStatus = 'waiting' | 'notified' | 'entered' | 'rejected';

export type AdminAdminLoginData = {
    formData: Body_admin_admin_login;
};

export type AdminAdminLoginResponse = (Token);

export type AdminUpdateRestaurantData = {
    requestBody: RestaurantUpdate;
};

export type AdminUpdateRestaurantResponse = (Restaurants);

export type AdminUpdateMenuData = {
    menuId: string;
    requestBody: MenuUpdate;
};

export type AdminUpdateMenuResponse = (MenuPublic);

export type AdminReadTablesData = {
    status?: (TableStatus | AllFilter);
    type?: (TableType | AllFilter);
};

export type AdminReadTablesResponse = (Array<TableBasic>);

export type AdminReadTableData = {
    tableId: string;
};

export type AdminReadTableResponse = (TableWithOrders);

export type AdminUpdateTableData = {
    requestBody: TableUpdate;
    tableId: string;
};

export type AdminUpdateTableResponse = (TablePublic);

export type AdminReadWaitingsData = {
    status?: (WaitingStatus | AllFilter);
};

export type AdminReadWaitingsResponse = (Array<WaitingPublic>);

export type AdminDequeueWaitingsData = {
    dequeueCount?: number;
};

export type AdminDequeueWaitingsResponse = (Array<WaitingPublic>);

export type AdminConfirmEnterWaitingData = {
    waitingId: string;
};

export type AdminConfirmEnterWaitingResponse = ({
    [key: string]: unknown;
});

export type AdminRejectWaitingData = {
    reason?: string;
    waitingId: string;
};

export type AdminRejectWaitingResponse = ({
    [key: string]: unknown;
});

export type AdminCreateKioskOrderData = {
    requestBody: KioskOrderCreate;
};

export type AdminCreateKioskOrderResponse = (OrderWithPaymentInfo);

export type AdminReadOrdersData = {
    status?: (OrderStatus | AllFilter);
};

export type AdminReadOrdersResponse = (Array<OrderWithPaymentInfo>);

export type AdminReadOrderData = {
    orderId: string;
};

export type AdminReadOrderResponse = (OrderWithPaymentInfo);

export type AdminUpdateOrderData = {
    orderId: string;
    requestBody: OrderUpdate;
};

export type AdminUpdateOrderResponse = (Orders);

export type AdminRejectOrderData = {
    orderId: string;
    reason?: string;
};

export type AdminRejectOrderResponse = ({
    [key: string]: unknown;
});

export type AdminUpdateMenuOrderData = {
    orderedMenuId: string;
    requestBody: OrderedMenuUpdate;
};

export type AdminUpdateMenuOrderResponse = ({
    [key: string]: unknown;
});

export type AdminRejectMenuOrderData = {
    orderedMenuId: string;
    reason?: string;
};

export type AdminRejectMenuOrderResponse = ({
    [key: string]: unknown;
});

export type AdminGetCookedOrderedMenusResponse = (Array<OrderedMenuForServing>);

export type AdminGetCookingQueueResponse = (Array<MenuCookingQueue>);

export type AdminCookOneMenuData = {
    menuId: string;
};

export type AdminCookOneMenuResponse = ({
    [key: string]: unknown;
});

export type AdminReadPaymentsResponse = (Array<PaymentWithOrder>);

export type AdminRefundPaymentData = {
    paymentId: string;
};

export type AdminRefundPaymentResponse = (PaymentWithOrder);

export type AdminGetMenuSalesStatsData = {
    /**
     * 조회할 일수 (기본 30일)
     */
    days?: number;
};

export type AdminGetMenuSalesStatsResponse = (Array<MenuSalesStats>);

export type MenusReadMenusResponse = (Array<MenuPublic>);

export type OrdersCreateOrderData = {
    requestBody: TableOrderCreate;
};

export type OrdersCreateOrderResponse = (OrderWithPaymentInfo);

export type OrdersReadOrdersByTableData = {
    tableId: string;
};

export type OrdersReadOrdersByTableResponse = (Array<Orders>);

export type RestaurantsReadRestaurantsResponse = (Restaurants);

export type UtilsHealthCheckResponse = (boolean);

export type WaitingsReadWatingsData = {
    requestBody: WaitingFind;
};

export type WaitingsReadWatingsResponse = (Array<Waitings>);

export type WaitingsEnqueueWaitingsData = {
    requestBody: WaitingCreate;
};

export type WaitingsEnqueueWaitingsResponse = (Waitings);

export type WaitingsCancelWaitingData = {
    requestBody: WaitingFind;
};

export type WaitingsCancelWaitingResponse = (unknown);

export type WaitingsGetWaitingData = {
    waitingId: string;
};

export type WaitingsGetWaitingResponse = (Waitings);

export type WaitingsCancelWaitingByIdData = {
    waitingId: string;
};

export type WaitingsCancelWaitingByIdResponse = (unknown);