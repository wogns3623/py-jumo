// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AdminAdminLoginData, AdminAdminLoginResponse, AdminUpdateRestaurantData, AdminUpdateRestaurantResponse, AdminUpdateMenuData, AdminUpdateMenuResponse, AdminReadTablesData, AdminReadTablesResponse, AdminUpdateTableData, AdminUpdateTableResponse, AdminReadWaitingsData, AdminReadWaitingsResponse, AdminDequeueWaitingsData, AdminDequeueWaitingsResponse, AdminEnterWaitingData, AdminEnterWaitingResponse, AdminRejectWaitingData, AdminRejectWaitingResponse, AdminCreateKioskOrderData, AdminCreateKioskOrderResponse, AdminReadOrdersData, AdminReadOrdersResponse, AdminReadOrderData, AdminReadOrderResponse, AdminUpdateOrderData, AdminUpdateOrderResponse, AdminRejectOrderData, AdminRejectOrderResponse, AdminUpdateMenuOrderData, AdminUpdateMenuOrderResponse, AdminRejectMenuOrderData, AdminRejectMenuOrderResponse, AdminReadPaymentsResponse, AdminRefundPaymentData, AdminRefundPaymentResponse, MenusReadMenusResponse, TeamsReadOrdersByTeamData, TeamsReadOrdersByTeamResponse, TeamsCreateOrderData, TeamsCreateOrderResponse, RestaurantsReadRestaurantsResponse, TeamsCreateTeamData, TeamsCreateTeamResponse, UtilsHealthCheckResponse, WaitingsReadWatingsData, WaitingsReadWatingsResponse, WaitingsCancelWaitingData, WaitingsCancelWaitingResponse } from './types.gen';

export class AdminService {
    /**
     * Admin Login
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static adminLogin(data: AdminAdminLoginData): CancelablePromise<AdminAdminLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/login',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Restaurant
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Restaurants Successful Response
     * @throws ApiError
     */
    public static updateRestaurant(data: AdminUpdateRestaurantData): CancelablePromise<AdminUpdateRestaurantResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/restaurants',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Menu
     * @param data The data for the request.
     * @param data.menuId
     * @param data.requestBody
     * @returns Menus Successful Response
     * @throws ApiError
     */
    public static updateMenu(data: AdminUpdateMenuData): CancelablePromise<AdminUpdateMenuResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/menus/{menu_id}',
            path: {
                menu_id: data.menuId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Tables
     * @param data The data for the request.
     * @param data.status
     * @returns Tables Successful Response
     * @throws ApiError
     */
    public static readTables(data: AdminReadTablesData = {}): CancelablePromise<AdminReadTablesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/tables',
            query: {
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Table
     * @param data The data for the request.
     * @param data.tableId
     * @param data.requestBody
     * @returns Tables Successful Response
     * @throws ApiError
     */
    public static updateTable(data: AdminUpdateTableData): CancelablePromise<AdminUpdateTableResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/tables/{table_id}',
            path: {
                table_id: data.tableId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Waitings
     * @param data The data for the request.
     * @param data.status
     * @returns Waitings Successful Response
     * @throws ApiError
     */
    public static readWaitings(data: AdminReadWaitingsData = {}): CancelablePromise<AdminReadWaitingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/waitings',
            query: {
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Dequeue Waitings
     * @param data The data for the request.
     * @param data.dequeueCount
     * @returns Waitings 웨이팅 처리
     * @throws ApiError
     */
    public static dequeueWaitings(data: AdminDequeueWaitingsData = {}): CancelablePromise<AdminDequeueWaitingsResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/waitings/dequeue',
            query: {
                dequeue_count: data.dequeueCount
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Enter Waiting
     * @param data The data for the request.
     * @param data.waitingId
     * @returns Waitings 웨이팅 입장 처리
     * @throws ApiError
     */
    public static enterWaiting(data: AdminEnterWaitingData): CancelablePromise<AdminEnterWaitingResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/waitings/{waiting_id}/enter',
            path: {
                waiting_id: data.waitingId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reject Waiting
     * @param data The data for the request.
     * @param data.waitingId
     * @param data.reason
     * @returns unknown 웨이팅 거절 처리
     * @throws ApiError
     */
    public static rejectWaiting(data: AdminRejectWaitingData): CancelablePromise<AdminRejectWaitingResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/admin/waitings/{waiting_id}',
            path: {
                waiting_id: data.waitingId
            },
            query: {
                reason: data.reason
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Kiosk Order
     * @param data The data for the request.
     * @param data.requestBody
     * @returns OrderWithPaymentInfo Successful Response
     * @throws ApiError
     */
    public static createKioskOrder(data: AdminCreateKioskOrderData): CancelablePromise<AdminCreateKioskOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/kiosk/orders',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Orders
     * @param data The data for the request.
     * @param data.status
     * @returns Orders Successful Response
     * @throws ApiError
     */
    public static readOrders(data: AdminReadOrdersData = {}): CancelablePromise<AdminReadOrdersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/orders',
            query: {
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Order
     * @param data The data for the request.
     * @param data.orderId
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static readOrder(data: AdminReadOrderData): CancelablePromise<AdminReadOrderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/orders/{order_id}',
            path: {
                order_id: data.orderId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Order
     * @param data The data for the request.
     * @param data.orderId
     * @param data.requestBody
     * @returns Orders Successful Response
     * @throws ApiError
     */
    public static updateOrder(data: AdminUpdateOrderData): CancelablePromise<AdminUpdateOrderResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/orders/{order_id}',
            path: {
                order_id: data.orderId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reject Order
     * @param data The data for the request.
     * @param data.orderId
     * @param data.reason
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static rejectOrder(data: AdminRejectOrderData): CancelablePromise<AdminRejectOrderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/admin/orders/{order_id}',
            path: {
                order_id: data.orderId
            },
            query: {
                reason: data.reason
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Menu Order
     * @param data The data for the request.
     * @param data.orderId
     * @param data.menuId
     * @param data.requestBody
     * @returns OrderedMenus Successful Response
     * @throws ApiError
     */
    public static updateMenuOrder(data: AdminUpdateMenuOrderData): CancelablePromise<AdminUpdateMenuOrderResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/orders/{order_id}/menus/{menu_id}',
            path: {
                order_id: data.orderId,
                menu_id: data.menuId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reject Menu Order
     * @param data The data for the request.
     * @param data.orderId
     * @param data.menuId
     * @param data.reason
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static rejectMenuOrder(data: AdminRejectMenuOrderData): CancelablePromise<AdminRejectMenuOrderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/admin/orders/{order_id}/menus/{menu_id}',
            path: {
                order_id: data.orderId,
                menu_id: data.menuId
            },
            query: {
                reason: data.reason
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Payments
     * @returns Payments Successful Response
     * @throws ApiError
     */
    public static readPayments(): CancelablePromise<AdminReadPaymentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/payments'
        });
    }
    
    /**
     * Refund Payment
     * @param data The data for the request.
     * @param data.paymentId
     * @returns Payments Successful Response
     * @throws ApiError
     */
    public static refundPayment(data: AdminRefundPaymentData): CancelablePromise<AdminRefundPaymentResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/payments/{payment_id}/refund',
            path: {
                payment_id: data.paymentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Admin Login
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static adminAdminLogin(data: AdminAdminLoginData): CancelablePromise<AdminAdminLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/login',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class MenusService {
    /**
     * Update Menu
     * @param data The data for the request.
     * @param data.menuId
     * @param data.requestBody
     * @returns Menus Successful Response
     * @throws ApiError
     */
    public static adminUpdateMenu(data: AdminUpdateMenuData): CancelablePromise<AdminUpdateMenuResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/menus/{menu_id}',
            path: {
                menu_id: data.menuId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Menus
     * @returns MenuPublic Successful Response
     * @throws ApiError
     */
    public static readMenus(): CancelablePromise<MenusReadMenusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/menus'
        });
    }
    
}

export class OrdersService {
    /**
     * Create Kiosk Order
     * @param data The data for the request.
     * @param data.requestBody
     * @returns OrderWithPaymentInfo Successful Response
     * @throws ApiError
     */
    public static adminCreateKioskOrder(data: AdminCreateKioskOrderData): CancelablePromise<AdminCreateKioskOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/kiosk/orders',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Orders
     * @param data The data for the request.
     * @param data.status
     * @returns Orders Successful Response
     * @throws ApiError
     */
    public static adminReadOrders(data: AdminReadOrdersData = {}): CancelablePromise<AdminReadOrdersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/orders',
            query: {
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Order
     * @param data The data for the request.
     * @param data.orderId
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static adminReadOrder(data: AdminReadOrderData): CancelablePromise<AdminReadOrderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/orders/{order_id}',
            path: {
                order_id: data.orderId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Order
     * @param data The data for the request.
     * @param data.orderId
     * @param data.requestBody
     * @returns Orders Successful Response
     * @throws ApiError
     */
    public static adminUpdateOrder(data: AdminUpdateOrderData): CancelablePromise<AdminUpdateOrderResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/orders/{order_id}',
            path: {
                order_id: data.orderId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reject Order
     * @param data The data for the request.
     * @param data.orderId
     * @param data.reason
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static adminRejectOrder(data: AdminRejectOrderData): CancelablePromise<AdminRejectOrderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/admin/orders/{order_id}',
            path: {
                order_id: data.orderId
            },
            query: {
                reason: data.reason
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Menu Order
     * @param data The data for the request.
     * @param data.orderId
     * @param data.menuId
     * @param data.requestBody
     * @returns OrderedMenus Successful Response
     * @throws ApiError
     */
    public static adminUpdateMenuOrder(data: AdminUpdateMenuOrderData): CancelablePromise<AdminUpdateMenuOrderResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/orders/{order_id}/menus/{menu_id}',
            path: {
                order_id: data.orderId,
                menu_id: data.menuId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reject Menu Order
     * @param data The data for the request.
     * @param data.orderId
     * @param data.menuId
     * @param data.reason
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static adminRejectMenuOrder(data: AdminRejectMenuOrderData): CancelablePromise<AdminRejectMenuOrderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/admin/orders/{order_id}/menus/{menu_id}',
            path: {
                order_id: data.orderId,
                menu_id: data.menuId
            },
            query: {
                reason: data.reason
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Orders By Team
     * @param data The data for the request.
     * @param data.teamId
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static teamsReadOrdersByTeam(data: TeamsReadOrdersByTeamData): CancelablePromise<TeamsReadOrdersByTeamResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/teams/{team_id}/orders',
            path: {
                team_id: data.teamId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Order
     * @param data The data for the request.
     * @param data.teamId
     * @param data.requestBody
     * @returns OrderWithPaymentInfo Successful Response
     * @throws ApiError
     */
    public static teamsCreateOrder(data: TeamsCreateOrderData): CancelablePromise<TeamsCreateOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/teams/{team_id}/orders',
            path: {
                team_id: data.teamId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PaymentsService {
    /**
     * Read Payments
     * @returns Payments Successful Response
     * @throws ApiError
     */
    public static adminReadPayments(): CancelablePromise<AdminReadPaymentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/payments'
        });
    }
    
    /**
     * Refund Payment
     * @param data The data for the request.
     * @param data.paymentId
     * @returns Payments Successful Response
     * @throws ApiError
     */
    public static adminRefundPayment(data: AdminRefundPaymentData): CancelablePromise<AdminRefundPaymentResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/payments/{payment_id}/refund',
            path: {
                payment_id: data.paymentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class RestaurantsService {
    /**
     * Read Restaurants
     * Retrieve restaurant information.
     * @returns Restaurants Successful Response
     * @throws ApiError
     */
    public static readRestaurants(): CancelablePromise<RestaurantsReadRestaurantsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/restaurants'
        });
    }
    
}

export class TablesService {
    /**
     * Read Tables
     * @param data The data for the request.
     * @param data.status
     * @returns Tables Successful Response
     * @throws ApiError
     */
    public static adminReadTables(data: AdminReadTablesData = {}): CancelablePromise<AdminReadTablesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/tables',
            query: {
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Table
     * @param data The data for the request.
     * @param data.tableId
     * @param data.requestBody
     * @returns Tables Successful Response
     * @throws ApiError
     */
    public static adminUpdateTable(data: AdminUpdateTableData): CancelablePromise<AdminUpdateTableResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/tables/{table_id}',
            path: {
                table_id: data.tableId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TeamsService {
    /**
     * Create Team
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TeamPublic Successful Response
     * @throws ApiError
     */
    public static createTeam(data: TeamsCreateTeamData): CancelablePromise<TeamsCreateTeamResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/teams',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Orders By Team
     * @param data The data for the request.
     * @param data.teamId
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static readOrdersByTeam(data: TeamsReadOrdersByTeamData): CancelablePromise<TeamsReadOrdersByTeamResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/teams/{team_id}/orders',
            path: {
                team_id: data.teamId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Order
     * @param data The data for the request.
     * @param data.teamId
     * @param data.requestBody
     * @returns OrderWithPaymentInfo Successful Response
     * @throws ApiError
     */
    public static createOrder(data: TeamsCreateOrderData): CancelablePromise<TeamsCreateOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/teams/{team_id}/orders',
            path: {
                team_id: data.teamId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check'
        });
    }
    
}

export class WaitingsService {
    /**
     * Read Waitings
     * @param data The data for the request.
     * @param data.status
     * @returns Waitings Successful Response
     * @throws ApiError
     */
    public static adminReadWaitings(data: AdminReadWaitingsData = {}): CancelablePromise<AdminReadWaitingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/waitings',
            query: {
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Dequeue Waitings
     * @param data The data for the request.
     * @param data.dequeueCount
     * @returns Waitings 웨이팅 처리
     * @throws ApiError
     */
    public static adminDequeueWaitings(data: AdminDequeueWaitingsData = {}): CancelablePromise<AdminDequeueWaitingsResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/waitings/dequeue',
            query: {
                dequeue_count: data.dequeueCount
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Enter Waiting
     * @param data The data for the request.
     * @param data.waitingId
     * @returns Waitings 웨이팅 입장 처리
     * @throws ApiError
     */
    public static adminEnterWaiting(data: AdminEnterWaitingData): CancelablePromise<AdminEnterWaitingResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/admin/waitings/{waiting_id}/enter',
            path: {
                waiting_id: data.waitingId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reject Waiting
     * @param data The data for the request.
     * @param data.waitingId
     * @param data.reason
     * @returns unknown 웨이팅 거절 처리
     * @throws ApiError
     */
    public static adminRejectWaiting(data: AdminRejectWaitingData): CancelablePromise<AdminRejectWaitingResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/admin/waitings/{waiting_id}',
            path: {
                waiting_id: data.waitingId
            },
            query: {
                reason: data.reason
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Watings
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Waitings Successful Response
     * @throws ApiError
     */
    public static readWatings(data: WaitingsReadWatingsData): CancelablePromise<WaitingsReadWatingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/waitings',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Cancel Waiting
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static cancelWaiting(data: WaitingsCancelWaitingData): CancelablePromise<WaitingsCancelWaitingResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/waitings',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}